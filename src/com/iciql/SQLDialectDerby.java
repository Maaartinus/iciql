/*
 * Copyright 2011 James Moger.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.iciql;

import java.text.MessageFormat;

import com.iciql.TableDefinition.FieldDefinition;
import com.iciql.TableDefinition.IndexDefinition;
import com.iciql.util.StatementBuilder;

/**
 * Derby database dialect.
 */
public class SQLDialectDerby extends SQLDialectDefault {

	@Override
	public Class<? extends java.util.Date> getDateTimeClass() {
		return java.sql.Timestamp.class;
	}

	@Override
	protected String convertSqlType(String sqlType) {
		if ("TINYINT".equals(sqlType)) {
			// Derby does not have a TINYINT/BYTE type
			return "SMALLINT";
		}
		return sqlType;
	}

	@Override
	public boolean supportsMemoryTables() {
		return false;
	}

	@Override
	public boolean supportsIfNotExists() {
		return false;
	}

	@Override
	public boolean supportsLimitOffset() {
		// FETCH/OFFSET added in 10.5
		return databaseVersion >= 10.5f;
	}

	@Override
	public void appendLimitOffset(SQLStatement stat, long limit, long offset) {
		if (offset > 0) {
			stat.appendSQL(" OFFSET " + offset + (offset == 1 ? " ROW" : " ROWS"));
		}
		if (limit > 0) {
			stat.appendSQL(" FETCH NEXT " + limit + (limit == 1 ? " ROW" : " ROWS") + " ONLY");
		}
	}

	@Override
	public String prepareColumnName(String name) {
		return name;
	}

	@Override
	protected boolean prepareColumnDefinition(StatementBuilder buff, boolean isAutoIncrement,
			boolean isPrimaryKey) {
		if (isAutoIncrement) {
			buff.append(" GENERATED BY DEFAULT AS IDENTITY");
		}
		return false;
	}

	@Override
	public void prepareCreateIndex(SQLStatement stat, String schema, String table, IndexDefinition index) {
		StatementBuilder buff = new StatementBuilder();
		buff.append("CREATE ");
		switch (index.type) {
		case UNIQUE:
			buff.append("UNIQUE ");
			break;
		case UNIQUE_HASH:
			buff.append("UNIQUE ");
			break;
		}
		buff.append("INDEX ");
		buff.append(index.indexName);
		buff.append(" ON ");
		buff.append(table);
		buff.append("(");
		for (String col : index.columnNames) {
			buff.appendExceptFirst(", ");
			buff.append(prepareColumnName(col));
		}
		buff.append(") ");

		stat.setSQL(buff.toString().trim());
	}

	/**
	 * Derby does not support the SQL2003 MERGE syntax, but we can use a trick
	 * to insert a row if it does not exist and call update() in Db.merge() if
	 * the affected row count is 0;
	 * 
	 * http://stackoverflow.com/questions/407688
	 */
	@Override
	public <T> void prepareMerge(SQLStatement stat, String schemaName, String tableName,
			TableDefinition<T> def, Object obj) {
		StatementBuilder buff = new StatementBuilder("INSERT INTO ");
		buff.append(prepareTableName(schemaName, tableName));
		buff.append(" (");
		buff.resetCount();
		for (FieldDefinition field : def.fields) {
			buff.appendExceptFirst(", ");
			buff.append(prepareColumnName(field.columnName));
		}
		buff.append(") (SELECT ");
		buff.resetCount();
		for (FieldDefinition field : def.fields) {
			buff.appendExceptFirst(", ");
			buff.append('?');
			Object value = def.getValue(obj, field);
			stat.addParameter(value);
		}
		buff.append(" FROM ");
		buff.append(prepareTableName(schemaName, tableName));
		buff.append(" WHERE ");
		buff.resetCount();
		for (FieldDefinition field : def.fields) {
			if (field.isPrimaryKey) {
				buff.appendExceptFirst(" AND ");
				buff.append(MessageFormat.format("{0} = ?", prepareColumnName(field.columnName)));
				Object value = def.getValue(obj, field);
				stat.addParameter(value);
			}
		}
		buff.append(" HAVING count(*)=0)");
		stat.setSQL(buff.toString());
	}
}