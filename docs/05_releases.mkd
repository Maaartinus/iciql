## Release History

### Current Release

<span class="warning">iciql is undergoing rapid development so api and configuration are subject to change from release to release</span>

**%VERSION%** ([zip](http://code.google.com/p/iciql/downloads/detail?name=%ZIP%)|[jar](http://code.google.com/p/iciql/downloads/detail?name=%JAR%)) &nbsp; *released %BUILDDATE%*

- api change release (API v4)
- @IQColumn(allowNull=true) -> @IQColumn(nullable=true)
- All columns are assumed NULLABLE unless explicitly set *@IQColumn(nullable = false)*
- allow using objects to assign default values<br/>
%BEGINCODE%
// CREATE TABLE ... myDate DATETIME DEFAULT '2000-02-01 00:00:00'
@IQColumn
Date myDate = new Date(100, 1, 1);
%ENDCODE%
- changed @IQTable.primaryKey definition to use array of column names<br/>
%BEGINCODE%
@IQTable( primaryKey = {"name", "nickname"})
%ENDCODE%

### Older Releases

**0.6.3** &nbsp; *released 2011-08-08*

- api change release (API v3)
- finished enum support (issue 4)
- added UUID type support (H2 databases only)
- added partial primitives support *(primitives may not be used for compile-time condition clauses)*
- added *between(A y).and(A z)* condition syntax
- moved dialects into separate package

**0.6.2** &nbsp; *released 2011-08-05*

- api change release (API v2)
- fix to versioning to support H2 1.3.158+
- added BLOB support (issue 1)
- added java.lang.Enum support (issue 2)
- allow runtime flexible mapping of BOOL columns to Integer fields
- allow runtime flexible mapping of INT columns to Boolean fields
- annotations overhaul to reduce verbosity
    - @IQSchema(name="public") -> @IQSchema("public")
    - @IQDatabase(version=2) -> @IQVersion(2)
    - @IQTable(version=2) -> @IQVersion(2)
    - @IQIndex annotation simplified to be used for one index definition and expanded to specify index name
    - added @IQIndexes annotation to specify multiple IQIndex annotations<br/>
%BEGINCODE%
@IQIndexes({ @IQIndex("name"), @IQIndex(name="myindexname" value={"name", "nickname"}) })
%ENDCODE%
    - @IQColumn(maxLength=20) -> @IQColumn(length=20)
    - @IQColumn(trimString=true) -> @IQColumn(trim=true)
    
**0.5.0** &nbsp; *released 2011-08-03*

- initial release (API v1)

*API changes compared to JaQu from H2 1.3.157 sources*

- deprecated model class interface configuration
- added *Db.open(Connection conn)* method, changed constructor to default scope
- added *Db.registerDialect* static methods to register custom dialects
- added *Query.where(String fragment, Object... args)* method to build a runtime query fragment when compile-time queries are too strict
- added *Db.executeQuery(String query, Object... args)* to execute a complete sql query with optional arguments
- added *Db.executeQuery(Class modelClass, String query, Object... args)* to execute a complete sql query, with optional arguments, and build objects from the result
- added *Db.buildObjects(Class modelClass, ResultSet rs)* method to build objects from the ResultSet of a plain sql query
- added *ThreadLocal&lt;T&gt; com.iciql.Utils.newThreadLocal(final Class&lt;? extends T&gt; clazz)* method
- added optional console statement logger and SLF4J statement logger
- refactored dialect support
- throw *IciqlException* (which is a RuntimeException) instead of RuntimeException
- synchronized *Db.classMap* for concurrent sharing of a Db instance
- Database/table versioning uses the <b>_iq_versions </b> table, the <b>_ jq_versions</b> table, if present, is ignored
- Changed the following class names:
    - org.h2.jaqu.Table =&gt; com.iciql.Iciql
    - org.h2.jaqu.JQSchema =&gt; com.iciql.IQSchema
    - org.h2.jaqu.JQDatabase =&gt; com.iciql.IQDatabase
    - org.h2.jaqu.JQIndex =&gt; com.iciql.IQIndex
    - org.h2.jaqu.JQTable =&gt; com.iciql.IQTable
    - org.h2.jaqu.JQColumn =&gt; com.iciql.IQColumn
- Changed the following method names:
    - org.h2.jaqu.Table.define() =&gt; com.iciql.Iciql.defineIQ()
    - QueryConditon.bigger =&gt; QueryCondition.exceeds
    - QueryConditon.biggerEqual =&gt; QueryCondition.atLeast
    - QueryConditon.smaller =&gt; QueryCondition.lessThan
    - QueryConditon.smallEqual =&gt; QueryCondition.atMost